from pathlib import Path
from unittest import TestCase
from english.utilities import RegexDict


def get_suffixes():
    return RegexDict(regex="-.*", ps="x", fstr="").find()


<<<<<<< HEAD
=======
suffixes = [
    "-'s",
    "-ability",
    "-able",
    "-ac",
    "-acean",
    "-aceous",
    "-ad",
    "-ade",
    "-aemia",
    "-age",
    "-agog",
    "-agogue",
    "-aholic",
    "-algia",
    "-amine",
    "-ana",
    "-ance",
    "-ancy",
    "-androus",
    "-andry",
    "-ane",
    "-ant",
    "-ar",
    "-arch",
    "-archy",
    "-ard",
    "-arian",
    "-arium",
    "-art",
    "-ary",
    "-ase",
    "-ast",
    "-athon",
    "-ation",
    "-ative",
    "-ator",
    "-atory",
    "-biont",
    "-biosis",
    "-biotic",
    "-blast",
    "-blastic",
    "-cade",
    "-caine",
    "-carp",
    "-carpic",
    "-carpous",
    "-cene",
    "-centric",
    "-cephalic",
    "-cephalous",
    "-cephaly",
    "-chore",
    "-chory",
    "-chrome",
    "-cide",
    "-clinal",
    "-cline",
    "-clinic",
    "-coccus",
    "-coel",
    "-coele",
    "-colous",
    "-cracy",
    "-crat",
    "-cy",
    "-cyte",
    "-derm",
    "-derma",
    "-dermatous",
    "-dom",
    "-drome",
    "-dromous",
    "-ectomy",
    "-eer",
    "-ein",
    "-eme",
    "-emia",
    "-ence",
    "-enchyma",
    "-ency",
    "-ene",
    "-ent",
    "-eous",
    "-ergic",
    "-ery",
    "-escence",
    "-escent",
    "-ese",
    "-esque",
    "-ess",
    "-et",
    "-etic",
    "-ette",
    "-ey",
    "-facient",
    "-faction",
    "-fer",
    "-ferous",
    "-fic",
    "-fication",
    "-fid",
    "-florous",
    "-fold",
    "-foliate",
    "-foliolate",
    "-form",
    "-fuge",
    "-ful",
    "-fy",
    "-gamous",
    "-gamy",
    "-gate",
    "-gen",
    "-gene",
    "-genesis",
    "-genic",
    "-genous",
    "-geny",
    "-gnathous",
    "-gon",
    "-gony",
    "-gram",
    "-graph",
    "-grapher",
    "-graphy",
    "-gyne",
    "-gynous",
    "-gyny",
    "-haemia",
    "-hedral",
    "-hedron",
    "-hemia",
    "-hood",
    "-ial",
    "-ian",
    "-iana",
    "-iasis",
    "-iatric",
    "-iatrics",
    "-iatry",
    "-ibility",
    "-ible",
    "-ic",
    "-ician",
    "-ics",
    "-id",
    "-ide",
    "-ie",
    "-ify",
    "-in",
    "-ion",
    "-ious",
    "-isation",
    "-ise",
    "-ish",
    "-ism",
    "-ist",
    "-itious",
    "-itis",
    "-ity",
    "-ium",
    "-ive",
    "-ization",
    "-ize",
    "-kin",
    "-kinesis",
    "-kins",
    "-latry",
    "-lepsy",
    "-less",
    "-let",
    "-like",
    "-lite",
    "-lith",
    "-lithic",
    "-log",
    "-logue",
    "-logy",
    "-lyse",
    "-lysis",
    "-lyte",
    "-lytic",
    "-lyze",
    "-mancy",
    "-mania",
    "-meister",
    "-ment",
    "-mer",
    "-mere",
    "-merous",
    "-meter",
    "-metric",
    "-metrics",
    "-metry",
    "-mo",
    "-morph",
    "-morphic",
    "-morphism",
    "-morphous",
    "-most",
    "-mycete",
    "-mycin",
    "-nasty",
    "-ness",
    "-nik",
    "-nomy",
    "-o",
    "-ode",
    "-odon",
    "-odont",
    "-odontia",
    "-oholic",
    "-oic",
    "-oid",
    "-ole",
    "-ology",
    "-oma",
    "-ome",
    "-one",
    "-ont",
    "-onym",
    "-onymy",
    "-opia",
    "-opsis",
    "-opsy",
    "-ory",
    "-osis",
    "-otic",
    "-ous",
    "-para",
    "-parous",
    "-path",
    "-pathy",
    "-ped",
    "-pede",
    "-penia",
    "-petal",
    "-phage",
    "-phagia",
    "-phagous",
    "-phagy",
    "-phane",
    "-phasia",
    "-phil",
    "-phile",
    "-philia",
    "-philiac",
    "-philic",
    "-philous",
    "-phobe",
    "-phobia",
    "-phobic",
    "-phone",
    "-phony",
    "-phore",
    "-phoresis",
    "-phorous",
    "-phrenia",
    "-phyll",
    "-phyllous",
    "-phyte",
    "-plasia",
    "-plasm",
    "-plast",
    "-plastic",
    "-plasty",
    "-plasy",
    "-plegia",
    "-plex",
    "-ploid",
    "-pod",
    "-pode",
    "-podous",
    "-poiesis",
    "-poietic",
    "-pter",
    "-rrhagia",
    "-rrhea",
    "-ry",
    "-scope",
    "-scopy",
    "-sect",
    "-sepalous",
    "-ship",
    "-speak",
    "-sperm",
    "-sporous",
    "-st",
    "-stasis",
    "-stat",
    "-ster",
    "-stome",
    "-stomy",
    "-taxis",
    "-taxy",
    "-therm",
    "-thermy",
    "-thymia",
    "-tome",
    "-tomy",
    "-tonia",
    "-trichous",
    "-trix",
    "-tron",
    "-trophic",
    "-trophy",
    "-tropic",
    "-tropism",
    "-tropous",
    "-tropy",
    "-tude",
    "-ty",
    "-ular",
    "-ule",
    "-ure",
    "-urgy",
    "-uria",
    "-uronic",
    "-urous",
    "-valent",
    "-ville",
    "-vorous",
    "-ward",
    "-wards",
    "-ware",
    "-ways",
    "-wide",
    "-wise",
    "-worthy",
    "-yl",
    "-yne",
    "-zoic",
    "-zoon",
    "-zygous",
    "-zyme",
]


# ask: create a pycharm function to add 2 number


>>>>>>> 50d471b (...)
class TestRegexDict(TestCase):

    def test_suffixes(self):
        suffixes = list(get_suffixes())
<<<<<<< HEAD
=======
        print(suffixes)
>>>>>>> 50d471b (...)
        self.assertEqual(len(suffixes), 336)
